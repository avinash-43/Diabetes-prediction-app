# -*- coding: utf-8 -*-
"""App.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mj1SFXrMWnsDcBXtgZ2bq5xQ-sW3qMVU
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import numpy as np
# from sklearn.preprocessing import StandardScaler
# from sklearn.ensemble import RandomForestClassifier
# 
# # Sample trained Random Forest model (replace with your actual model)
# rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
# 
# # Dummy data (Replace with your training data)
# X_train = np.random.rand(100, 8)  # 100 samples, 8 features
# y_train = np.random.randint(0, 2, size=100)  # 0 or 1 target class
# 
# # Train the model (this is a placeholder, use your real trained model)
# rf_model.fit(X_train, y_train)
# 
# # Streamlit User Interface (UI)
# st.title("Diabetes Prediction App")
# 
# # Collect user input
# pregnancies = st.number_input('Pregnancies', min_value=0, max_value=20, value=0)
# glucose = st.number_input('Glucose', min_value=0, max_value=200, value=120)
# blood_pressure = st.number_input('Blood Pressure', min_value=0, max_value=200, value=70)
# skin_thickness = st.number_input('Skin Thickness', min_value=0, max_value=100, value=20)
# insulin = st.number_input('Insulin', min_value=0, max_value=800, value=80)
# bmi = st.number_input('BMI', min_value=0.0, max_value=100.0, value=30.0)
# diabetes_pedigree = st.number_input('Diabetes Pedigree Function', min_value=0.0, max_value=2.0, value=0.5)
# age = st.number_input('Age', min_value=18, max_value=100, value=30)
# 
# # Prepare the user data in the same format as training data
# user_data = pd.DataFrame([[pregnancies, glucose, blood_pressure, skin_thickness, insulin, bmi, diabetes_pedigree, age]],
#                          columns=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI',
#                                   'DiabetesPedigreeFunction', 'Age'])
# 
# # Scaling user input (same as your model training)
# scaler = StandardScaler()
# user_data_scaled = scaler.fit_transform(user_data)
# 
# # Make a prediction
# prediction = rf_model.predict(user_data_scaled)
# 
# # Show prediction result
# if prediction[0] == 1:
#     st.write("The model predicts that you have diabetes.")
# else:
#     st.write("The model predicts that you do not have diabetes.")
#

!pip install pyngrok

!ngrok config add-authtoken 2vdGbEgZh4fHaWeHhQx6i10t517_5B3tYs1VvyF56AgCPZRxZ

!pkill streamlit
from pyngrok import ngrok
ngrok.kill()

!streamlit run app.py &>/content/logs.txt &

!pip install streamlit

!pip install pyngrok

!streamlit run app.py &>/content/logs.txt &

import time
from pyngrok import ngrok

time.sleep(10)  # Give Streamlit a few seconds to start
public_url = ngrok.connect(8501, "http")
print(f"🌐 Your Streamlit app is live here: {public_url}")

